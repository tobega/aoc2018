grammar log

file: [ <record>+ ]

record: { time: (<'\['>) <ISO_DATE_TIME> (<'] '>), note: <TO_LINE_END> }

ISO_DATE_TIME: <'\d\d\d\d-\d\d-\d\d \d\d:\d\d(:\d\d)?'> -> <DateTime>.parse

TO_LINE_END: <'[^\n]'*> (<'\n'>)

end log

# removes the second array level, i.e. [ [1,2], [3, [4,5]], 6] becomes [1,2,3,[4,5],6]
templates concat
  [ $it... -> $templates ]

  <[..]>
    $it...

  <*>
    $it
end concat

# How would we load a parameter, like a custom comparator? Use a new method returning a templates object?
templates bubblesort
  $let templates dragHighest
    [ $it[2..]... -> loop{ elem: $it[1] }(
        $it?<..$elem>( $it )?<*>( $loop (elem: $it -> $loop))($loop.elem)
    )
  end dragHighest
# How to represent the length property? .* or special |array| or just .length?
  0..($it.*-1) -> loop{ arr: $it }(
    arr: ([ ($arr(1..-$it) -> dragHighest), $arr(-$it!..) ] -> concat) -> $loop
  )($loop.arr)
end bubblesort

grammar<{*}> collate

shifts: [ <shift>+ ]

# Should string matchers always be regex? Or do we need special notation for regex?
shift: { guard: (<{note:'Guard #(\d+).*'(g=$1)}>)($g), naps: [ <nap>+ ] }

nap: { sleep: (<{time: ms=<*>, note:'falls asleep'}>) #($ms.minute),
       wake: (<{time: mw=<*>, note:'wakes up'}>) #($mw.minute) }
end collate

let shifts = 'a4.txt' -> readfile -> log.file -> (bubblesort)... -> collate.shifts


