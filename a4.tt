composer record
  { time: (<'\['>) <ISO_DATE_TIME> (<'] '>), note: <TO_LINE_END> }

  rule ISO_DATE_TIME: <'\d\d\d\d-\d\d-\d\d \d\d:\d\d'>

  rule TO_LINE_END: <'[^\n]*'> (<'\n'>?)
end record

templates quicksort@{comparator:}
  @: [];
  $ -> #
  <[](2..)>
    def pivot: $(1);
    [ [ $(2..-1)... -> (
      <?([$, $pivot] -> comparator <..0>)>
        $ !
      <>
        ..|@quicksort: $;
     )] -> quicksort@{comparator:comparator}..., $pivot, $@ -> quicksort@{comparator:comparator}... ] !
   <>
     $ !
end quicksort

composer guardId
  (<'Guard #'>) <INT> (<' begins shift'>)
end guardId

composer minute
  (<'\d\d\d\d-\d\d-\d\d \d\d:0?'>) <INT>
end minute

templates shiftNaps
  templates collateShift
    def records: $;
    { guard: $(1).note -> guardId, naps:
      [2..~$::length:2 -> { sleep: $records($).time -> minute, wake: $records($+1).time -> minute }] } !
  end collateShift
  def log: $;
  def starts: [$ -> [i](<{note: <'Guard #.*'>}> $i !)..., 0];
  [ 1..($starts::length-1) -> $log($starts($)..($starts($+1) - 1)) -> collateShift ] !
end shiftNaps

templates byTime
  def second: $(2).time;
  $(1).time -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTime

def shifts: [ $IN::lines -> record ] -> quicksort@{comparator: byTime} -> shiftNaps;

// templates <[{guard:<number>}](2)>:<-1..1> guardComparator
templates guardComparator
  def second: $(2).guard;
  $(1).guard -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end guardComparator

//templates max@{comparator:<templates<[](2)>:<-1..1>>}
templates max@{comparator:}
  @: $(1);
  $(2..-1)... -> #
  $@ !
  <?([$, $@] -> comparator <1>)>
    @: $;
end max

def highestGuardNo: $shifts -> max@{comparator:guardComparator} -> $.guard;

templates collateGuards
  @: [ 1..$highestGuardNo -> { guard: $, naps: []} ];
  $... -> (def guard: $.guard;
    ..|@collateGuards($guard).naps: $.naps...;) -> !VOID
  [ $@... -> (<{naps:<[](1..)>}> $ !) ] !
end collateGuards

def guardNaps: $shifts -> collateGuards;

templates makeStats
  @: { guard: $.guard, totalSleep: 0, minutes: [ 0..59 -> 0 ] };
  $.naps... -> (def nap: $;
    @makeStats.totalSleep: $nap.wake - $nap.sleep + $@makeStats.totalSleep;
    $nap.sleep+1..$nap.wake -> @makeStats.minutes($): $@makeStats.minutes($) + 1;
  ) -> !VOID
  $@ !
end makeStats

def guardStats: [ $guardNaps... -> makeStats ];

// part 1
templates byTotalSleep
  def second: $(2).totalSleep;
  $(1).totalSleep -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTotalSleep

templates byTimes
  def second: $(2).times;
  $(1).times -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTimes

templates sleepiestMinute
  $ -> [i]({minute: $i - 1, times: $} !) -> max@{comparator: byTimes} !
end sleepiestMinute

$guardStats -> max@{comparator: byTotalSleep}
  -> (def minute: $.minutes -> sleepiestMinute -> $.minute;
      $.guard * $minute !)
  -> !OUT::write

'
' -> !OUT::write

// part 2

templates bySleepiestMinute
  def second: $(2).sleepiestMinute.times;
  $(1).sleepiestMinute.times -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end bySleepiestMinute

[ $guardStats... -> { guard: $.guard, sleepiestMinute: $.minutes -> sleepiestMinute } ]
  -> max@{comparator: bySleepiestMinute} -> $.guard * $.sleepiestMinute.minute -> !OUT::write
