composer record
  { time: (<'\['>) <ISO_DATE_TIME> (<'] '>), note: <TO_LINE_END> }

  ISO_DATE_TIME: <'\d\d\d\d-\d\d-\d\d \d\d:\d\d'>

  TO_LINE_END: <'[^\n]*'> (<'\n'>?)
end record

templates bubblesort
      templates bubble
          {N: 1} -> ...$@bubblesort -> @bubblesort // stop condition if no position changed, merge with current value
          $it(1) -> @
          // The [i] makes the inline templates apply to each value of the array, with i as the index value
          // for the array slice sent in (not the original array)
          $it(2..-1) -> [i](
              <?($it.time <..$@bubble.time>)>
                {N: $i} -> ...$@bubblesort -> @bubblesort // last position that changed
                $it !
              <>
                $@bubble !
                $it -> @bubble
          )... ! // output the elements as a stream
          $@ ! // output the maximum value saved in the state value
      end bubble

      { array: $it } -> @
      -1 -> # // -1 refers to the last element, since all is unsorted to start with
      <1>
        $@.array !
      <~1>
        {array: [ $@.array(1..$it) -> bubble, $@.array($it+1..-1)... ]} -> ...$@ -> @
        $@.N -> #
end bubblesort

composer guardId
  (<'Guard #'>) <INT> (<' begins shift'>)
end guardId

composer minute
  (<'\d\d\d\d-\d\d-\d\d \d\d:0?'>) <INT>
end minute

templates shiftNaps
  templates collateShift
    def records: $it
    { guard: $it(1).note -> guardId, naps:
      [2..~$it::length:2 -> { sleep: $records($it).time -> minute, wake: $records($it+1).time -> minute }] } !
  end collateShift
  def log: $it
  def starts: [$it -> [i](<{note: <'Guard #.*'>}> $i !)..., 0]
  [ 1..($starts::length-1) -> $log($starts($it)..($starts($it+1) - 1)) -> collateShift ] !
end shiftNaps

def shifts: [ stdin -> record ] -> bubblesort -> shiftNaps
