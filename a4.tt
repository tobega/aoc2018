composer record
  { time: (<'\['>) <ISO_DATE_TIME> (<'] '>), note: <TO_LINE_END> }

  ISO_DATE_TIME: <'\d\d\d\d-\d\d-\d\d \d\d:\d\d'>

  TO_LINE_END: <'[^\n]*'> (<'\n'>?)
end record

templates quicksort@{comparator:}
  @: []
  $it -> #
  <[](2..)>
    def pivot: $it(1)
    [ [ $it(2..-1)... -> (
      <?([$it, $pivot] -> $comparator <..0>)>
        $it !
      <>
        ..|@quicksort: $it
     )] -> quicksort@{comparator:$comparator}..., $pivot, $@ -> quicksort@{comparator:$comparator}... ] !
   <>
     $it !
end quicksort

composer guardId
  (<'Guard #'>) <INT> (<' begins shift'>)
end guardId

composer minute
  (<'\d\d\d\d-\d\d-\d\d \d\d:0?'>) <INT>
end minute

templates shiftNaps
  templates collateShift
    def records: $it
    { guard: $it(1).note -> guardId, naps:
      [2..~$it::length:2 -> { sleep: $records($it).time -> minute, wake: $records($it+1).time -> minute }] } !
  end collateShift
  def log: $it
  def starts: [$it -> [i](<{note: <'Guard #.*'>}> $i !)..., 0]
  [ 1..($starts::length-1) -> $log($starts($it)..($starts($it+1) - 1)) -> collateShift ] !
end shiftNaps

templates byTime
  def second: $it(2).time
  $it(1).time -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTime

def shifts: [ stdin -> record ] -> quicksort@{comparator: byTime} -> shiftNaps

// templates <[{guard:<number>}](2)>:<-1..1> guardComparator
templates guardComparator
  def second: $it(2).guard
  $it(1).guard -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end guardComparator

//templates max@{comparator:<templates<[](2)>:<-1..1>>}
templates max@{comparator:}
  @: $it(1)
  $it(2..-1)... -> #
  $@ !
  <?([$it, $@] -> $comparator <1>)>
    @: $it
end max

def highestGuardNo: $shifts -> max@{comparator:guardComparator} -> $it.guard

templates collateGuards
  @: [ 1..$highestGuardNo -> { guard: $it, naps: []} ]
  $it... -> (def guard: $it.guard
    ..|@collateGuards($guard).naps: $it.naps...) -> void
  [ $@... -> (<{naps:<[](1..)>}> $it !) ] !
end collateGuards

def guardNaps: $shifts -> collateGuards

templates makeStats
  @: { guard: $it.guard, totalSleep: 0, minutes: [ 0..59 -> 0 ] }
  $it.naps... -> (def nap: $it
    @makeStats.totalSleep: $nap.wake - $nap.sleep + $@makeStats.totalSleep
    $nap.sleep+1..$nap.wake -> (@makeStats.minutes($it): $@makeStats.minutes($it) + 1) -> void
  ) -> void
  $@ !
end makeStats

def guardStats: [ $guardNaps... -> makeStats ]

// part 1
templates byTotalSleep
  def second: $it(2).totalSleep
  $it(1).totalSleep -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTotalSleep

templates byTimes
  def second: $it(2).times
  $it(1).times -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTimes

templates sleepiestMinute
  $it -> [i]({minute: $i - 1, times: $it} !) -> max@{comparator: byTimes} !
end sleepiestMinute

$guardStats -> max@{comparator: byTotalSleep}
  -> (def minute: $it.minutes -> sleepiestMinute -> $it.minute
      $it.guard * $minute !)
  -> stdout

'
' -> stdout

// part 2

templates bySleepiestMinute
  def second: $it(2).sleepiestMinute.times
  $it(1).sleepiestMinute.times -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end bySleepiestMinute

[ $guardStats... -> { guard: $it.guard, sleepiestMinute: $it.minutes -> sleepiestMinute } ]
  -> max@{comparator: bySleepiestMinute} -> $it.guard * $it.sleepiestMinute.minute -> stdout
