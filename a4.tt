composer record
  { time: (<'\['>) <ISO_DATE_TIME> (<'] '>), note: <TO_LINE_END> }

  ISO_DATE_TIME: <'\d\d\d\d-\d\d-\d\d \d\d:\d\d'>

  TO_LINE_END: <'[^\n]*'> (<'\n'>?)
end record

templates bubblesort
      templates bubble
          {N: 1} -> ...$@bubblesort -> @bubblesort // stop condition if no position changed, merge with current value
          $it(1) -> @
          // The [i] makes the inline templates apply to each value of the array, with i as the index value
          // for the array slice sent in (not the original array)
          $it(2..-1) -> [i](
              <?($it.time <..$@bubble.time>)>
                {N: $i} -> ...$@bubblesort -> @bubblesort // last position that changed
                $it !
              <>
                $@bubble !
                $it -> @bubble
          )... ! // output the elements as a stream
          $@ ! // output the maximum value saved in the state value
      end bubble

      { array: $it } -> @
      -1 -> # // -1 refers to the last element, since all is unsorted to start with
      <1>
        $@.array !
      <~1>
        {array: [ $@.array(1..$it) -> bubble, $@.array($it+1..-1)... ]} -> ...$@ -> @
        $@.N -> #
end bubblesort

composer guardId
  (<'Guard #'>) <INT> (<' begins shift'>)
end guardId

composer minute
  (<'\d\d\d\d-\d\d-\d\d \d\d:0?'>) <INT>
end minute

templates shiftNaps
  templates collateShift
    def records: $it
    { guard: $it(1).note -> guardId, naps:
      [2..~$it::length:2 -> { sleep: $records($it).time -> minute, wake: $records($it+1).time -> minute }] } !
  end collateShift
  def log: $it
  def starts: [$it -> [i](<{note: <'Guard #.*'>}> $i !)..., 0]
  [ 1..($starts::length-1) -> $log($starts($it)..($starts($it+1) - 1)) -> collateShift ] !
end shiftNaps

def shifts: [ stdin -> record ] -> bubblesort -> shiftNaps

// templates <[{guard:<number>}](2)>:<-1..1> guardComparator
templates guardComparator
  def second: $it(2).guard
  $it(1).guard -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end guardComparator

//templates max@{comparator:<templates<[](2)>:<-1..1>>}
templates max@{comparator:}
  $it(1) -> @
  $it(2..-1)... -> #
  $@ !
  <?([$it, $@] -> $comparator <1>)>
    $it -> @
end max

def highestGuardNo: $shifts -> max@{comparator:guardComparator} -> $it.guard

templates collateGuards
  [ 1..$highestGuardNo -> { guard: $it, naps: []} ] -> @
  $it... -> (def guard: $it.guard
    [ $@collateGuards(1..$guard-1)..., { guard: $guard, naps: $it.naps... -> ...$@collateGuards($guard).naps },
    $@collateGuards($guard+1..-1)... ]  -> @collateGuards) -> void
  [ $@... -> (<{naps:<[](1..)>}> $it !) ] !
end collateGuards

def guardNaps: $shifts -> collateGuards

templates makeStats
  { guard: $it.guard, totalSleep: 0, minutes: [ 0..59 -> 0 ] } -> @
  $it.naps... -> (def nap: $it
    { totalSleep: $nap.wake - $nap.sleep + $@makeStats.totalSleep,
      minutes: [ $@makeStats.minutes(1..$nap.sleep)...,
        $@makeStats.minutes($nap.sleep+1..$nap.wake)... -> $it + 1,
        $@makeStats.minutes($nap.wake+1..-1)... ] } -> ...$@makeStats -> @makeStats) -> void
  $@ !
end makeStats

def guardStats: [ $guardNaps... -> makeStats ]

// part 1
templates byTotalSleep
  def second: $it(2).totalSleep
  $it(1).totalSleep -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTotalSleep

templates byTimes
  def second: $it(2).times
  $it(1).times -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byTimes

templates sleepiestMinute
  $it -> [i]({minute: $i - 1, times: $it} !) -> max@{comparator: byTimes} !
end sleepiestMinute

$guardStats -> max@{comparator: byTotalSleep}
  -> (def minute: $it.minutes -> sleepiestMinute -> $it.minute
      $it.guard * $minute !)
  -> stdout

'
' -> stdout

// part 2

templates bySleepiestMinute
  def second: $it(2).sleepiestMinute.times
  $it(1).sleepiestMinute.times -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end bySleepiestMinute

[ $guardStats... -> { guard: $it.guard, sleepiestMinute: $it.minutes -> sleepiestMinute } ]
  -> max@{comparator: bySleepiestMinute} -> $it.guard * $it.sleepiestMinute.minute -> stdout
