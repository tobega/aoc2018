templates max
  $it(1) -> @
  $it(2..-1)... -> #
  $@ !
  <$@~..>
    $it -> @
end max

processor Marble
  { value: $it } -> @
  templates before
    { previous: $it } -> ...$@Marble -> @Marble
  end before
  templates after
    { next: $it } -> ...$@Marble -> @Marble
  end after
  templates back
    <1> $@Marble.previous !
    <2..> $it - 1 -> $@Marble.previous::back !
  end back
  templates forward
    <1> $@Marble.next !
    <2..> $it - 1 -> $@Marble.next::forward !
  end forward
  templates value // should be source
    $@Marble.value !
  end value
end Marble

templates game@{players:}
  def start: 0 -> Marble
  $start -> $start::before -> void // before should be marked as a sink
  $start -> $start::after -> void // as should after
  { scores: [ 1..$players -> 0 ], current: $start } -> @
  1..$it -> #
  $@.scores -> max !
  <?($it mod 23 <0>)>
    def player: ($it - 1) mod $players + 1
    def remove: 7 -> $@.current::back
    def prev: 1 -> $remove::back
    def next: 1 -> $remove::forward
    $prev -> $next::before -> void // sink
    $next -> $prev::after -> void // sink
    { scores: [ $@.scores(1..$player-1)..., $@.scores($player) + $it + $remove::value, $@.scores($player+1..-1)... ],
      current: 1 -> $remove::forward } -> @
  <>
    def placed: $it -> Marble
    def at1: 1 -> $@.current::forward
    def at2: 1 -> $at1::forward
    $at1 -> $placed::before -> void
    $at2 -> $placed::after -> void
    $placed -> $at2::before -> void
    $placed -> $at1::after -> void
    { scores: $@.scores,
      current: $placed } -> @
end game

71144 -> game@{players: 424} -> stdout
