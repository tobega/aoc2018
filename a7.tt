data step <'.'>
data dep <step>

composer step
  { dep: (<'Step '>) <'.'>, (<' must be finished before step '>) step: <'.'> (<' can begin.'>) }
end step

def deps: [ $IN::lines -> step ];

templates reduce&{operator:}
  @: $(1);
  $(2..last)... -> @reduce: [$@reduce, $] -> operator;
  $@ !
end reduce

templates min
  <?($(1)<..$(2)>)> $(1) !
  <> $(2) !
end min

// part 1
templates topological
 def waiting: [ $... -> $.step ];
{ unresolved: $,
   ready: [ $... -> $.dep -> \(<?($waiting <~[<=$>]>)> $ !\) ] } -> #
 when <{ready: <[](1..)>}> do
   def current: $;
   def next: $current.ready -> reduce&{operator:min};
   $next !
   def unresolved: [ $current.unresolved... -> \(<?($.dep <~=$next>)> $! \) ];
   def waiting: [ $unresolved... -> $.step ];
   { unresolved: $unresolved,
     ready: [ $current.ready... -> \(<~=$next> $ !\),
       $current.unresolved... -> \(<?($.dep <=$next>)> $! \) -> $.step -> \(<?($waiting <~[<=$>]>)> $ !\)]
   } -> #
end topological

$deps -> topological -> !OUT::write
'
' -> !OUT::write

// part 2
def tasks: ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'... -> (step:$) -> $::value];
templates taskIndex
  def value: $;
  $tasks -> \[i](<=$value> $i !\)... !
end taskIndex

templates minByTime
  <?($(1).time<..$(2).time>)> $(1) !
  <> $(2) !
end minByTime

templates multi&{workers:, delay:}
 @: 0;
 def waiting: [ $... -> $.step ];
 { unresolved: $,
   ready: [ $... -> $.dep -> \(<?($waiting <~[<=$>]>)> $ !\) ],
   workers: []} -> #
 $@ !

 when <{workers: <[](..$workers-1)>, ready: <[](1..)>}> do
   def current: $;
   def next: $current.ready -> reduce&{operator:min};
   { workers: [ $current.workers..., {task: $next, time: $delay + ($next -> taskIndex) }],
    ready: [$current.ready... -> \(<~=$next> $!\)],
    unresolved: $current.unresolved } -> #

 when <{workers: <[](1..)>}> do
   def mintime: $.workers -> reduce&{operator:minByTime} -> $.time;
   @: $mintime + $@;
   def current: $;
   def workers: [ $.workers... ->  { task: $.task, time: $.time - $mintime } ];
   def done: [$workers...  -> \(<?($.time <=0"s">)> $ !\) -> $.task];
   def unresolved: [ $current.unresolved... -> \(<?($done <~[<=$.dep>]>)> $! \) ];
   def waiting: [ $unresolved... -> $.step ];
   { unresolved: $unresolved,
     ready: [ $current.ready... -> \(<?($done <~[<=$>]>)> $ !\),
       $current.unresolved... -> \(<?($done <[<=$.dep>]>)> $! \) -> $.step -> \(<?($waiting <~[<=$>]>)> $ !\)],
     workers: [ $workers... -> \(<?($.time <1"s"..>)> $ !\)]
   } -> #
end multi

$deps -> multi&{workers: 5, delay: 60"s"} -> !OUT::write

