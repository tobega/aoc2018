composer nanobot
  { (<'pos=<'>) x: <INT>, (<','>) y: <INT>, (<','>) z: <INT>, (<'>, r='>) range: <INT> }
end nanobot

def bots: [ $IN::lines -> nanobot ];

templates abs
  <0..> $ ! <> -$ !
end abs

templates reduce@{op:}
  @: $(1);
  $(2..-1)... -> @reduce: [$@reduce, $] -> op;
  $@ !
end reduce

// part1
templates manhattanDistance@{from:}
  (($.x - $from.x) -> abs) + (($.y - $from.y) -> abs) + (($.z - $from.z) -> abs) !
end manhattanDistance

templates biggestRange
  <?($(1).range <$(2).range..>)> $(1) ! <> $(2) !
end biggestRange

def biggest: $bots -> reduce@{op:biggestRange};

[ $bots... -> manhattanDistance@{from:$biggest} -> (<..$biggest.range> $ !) ] -> $::length -> !OUT::write

'
' -> !OUT::write

// part2
// Resolving the planes defining the octahedron gives a nice set of equations
// 1: x + y + z <= r + a + b + c
// 2: x + y - z <= r + a + b - c
// 3: x - y + z <= r + a - b + c
// 4: x - y - z <= r + a - b - c
// 5: - x + y + z <= r - a + b + c
// 6: - x + y - z <= r - a + b - c
// 7: - x - y + z <= r - a - b + c
// 8: - x - y - z <= r - a - b - c

templates isFeasible
  @: 1;
  def bot: $;
  1..4 -> (<?($bot.constraints($) + $bot.constraints(-$) <..~0>)> @isFeasible: 0;) -> !VOID
  $@ !
end isFeasible

templates octahedronAround
  { intersectingBots: 1, constraints: [
    $.range + $.x + $.y + $.z,
    $.range + $.x + $.y - $.z,
    $.range + $.x - $.y + $.z,
    $.range + $.x - $.y - $.z,
    $.range - $.x + $.y + $.z,
    $.range - $.x + $.y - $.z,
    $.range - $.x - $.y + $.z,
    $.range - $.x - $.y - $.z
  ]} !
end octahedronAround

templates min
  <?($(1) <..$(2)>)> $(1) ! <> $(2) !
end min

templates transpose
  def a: $;
  [1..$a(1)::length -> $a(1..-1;$)] !
end transpose

templates intersect
  { intersectingBots: $(1).intersectingBots + $(2).intersectingBots,
    constraints: [[$(1).constraints, $(2).constraints] -> transpose ... -> min] } !
end intersect

templates part2
  def empty: { intersectingBots: 0, constraints: [1..8 -> 999999999]};
  @: { largestIntersect: $empty,
    feasibleChoices: $, remainingFeasibleChoices: [[]], currentIntersects: [ $empty ]};
  $@ -> #

  <{feasibleChoices: <[](1..)>}
      ?($.currentIntersects(-1).intersectingBots + $.feasibleChoices::length
        <$.largestIntersect.intersectingBots~..>)>
    def currentIntersect: [$.currentIntersects(-1), $.feasibleChoices(1)] -> intersect;
    ..|@.currentIntersects: $currentIntersect;
    def largestIntersect: $.largestIntersect -> (<{ intersectingBots: <..~$currentIntersect.intersectingBots>}> $currentIntersect ! <> $ !);
    ..|@.remainingFeasibleChoices: $.feasibleChoices(2..-1);
    ..|@: { feasibleChoices: [ $.feasibleChoices(2..-1)... -> (<?([$, $currentIntersect] -> intersect <?($ -> isFeasible <1>)>)> $ !) ],
      largestIntersect: $largestIntersect};
    $@ -> #

  <{remainingFeasibleChoices: <[](1..)>}>
    ..|@: { currentIntersects: $.currentIntersects(1..-2),
      feasibleChoices: $.remainingFeasibleChoices(-1),
      remainingFeasibleChoices: $.remainingFeasibleChoices(1..-2) };
    $@ -> #

  <>
  // Shaky hypothesis: turning the octahedron equations to >= means that the
  // minimum must be when it is =. But manhattan distance is the sum of absolute
  // values, so it must be the maximum of all the octahedron >= bounds.
    0 - ($.largestIntersect.constraints -> reduce@{op:min}) !
end part2

templates byBiggestRange
  $(2).range - $(1).range !
end byBiggestRange

templates sort@{comp:}
  @: [];
  $ -> #
  <[](2..)>
    def pivot: $(1);
    [ [ $(2..-1)... -> (
      <?([$, $pivot] -> comp <..0>)>
        $ !
      <>
        ..|@sort: $;
     )] -> sort@{comp:comp}..., $pivot, $@ -> sort@{comp:comp}... ] !
   <>
     $ !
end sort

def cubes: [ $bots -> sort@{comp:byBiggestRange} ... -> octahedronAround ];

$cubes -> part2 -> !OUT::write
