grammar nodes
  node: { (nc=<INT>) (WS) (nm=<INT>) (WS) children:[ <node>[nc] ], metadata:[ <INT>[nm] ] }
end nodes

let root = stdin -> nodes.node

#part 1

templates sum
  { sum: 0 } -> $sum
  $it... -> $templates # Could we just do it inline here? Anonymous action?

  <number>
    {sum: $sum.sum + $it} -> $sum
end sum

// probably the rules going deeper should be the default so we just need the precursor and the <number> rule?
// removes all array and object wrappings, giving a list of primitives
templates flatten
  [ $it -> $templates ]

  <[..]>
    $it... -> $templates

  <{*}>
    $it... -> $templates

  <*:value=<*>>
    $value -> $templates

  <number>
    $it
end flatten

$root -> flatten -> sum -> stdout

#part 2

templates nodeValues
  [ $it -> $templates ]

  <{children:[0]}>
    $it.metadata...

  <{children:[1..]}>
    $it.children($it.metadata...)... -> $templates
end nodeValues

$root -> nodeValues -> sum -> stdout

