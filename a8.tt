composer nodes
  <node>
  node: { (def nc: <INT>) (<WS>) (def nm: <INT>) (<WS>) children:[ <node>=$nc ], metadata:[ <metadata>=$nm ] } (<WS>?)
  metadata: <INT> (<WS>?)
end nodes

def root: stdin -> nodes

//part 1

templates sum
  0 -> @
  $it... -> ($@sum + $it -> @sum) -> void
  $@ !
end sum

// removes all array and object wrappings, giving a list of primitives
templates flatten
  [ $it -> # ] !

  <{}>
    $it.children... -> #
    $it.metadata... -> #

  <>
    $it !
end flatten

$root -> flatten -> sum -> stdout

'
' -> stdout

//part 2

templates nodeValues
  [ $it -> # ] !

  <{children:<[](0)>}>
    $it.metadata... !

  <{children:<[](1..)>}>
    def max: $it.children::length
    $it.children([$it.metadata... -> (<1..$max> $it!)])... -> #
end nodeValues

$root -> nodeValues -> sum -> stdout

