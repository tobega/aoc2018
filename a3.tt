composer claim
 { (<'#'>) id:<INT>, (<' @ '>)
 left:<INT> -> ($)"1", (<','>) top:<INT> -> ($)"1", (<': '>)
 width:<INT> -> ($)"1", (<'x'>) height: <INT> -> ($)"1" (<'\n'>?) }
end claim

def claims: [ $IN::lines -> claim ];

templates min
  <?($(1)<..$(2)>)> $(1) !
  <> $(2) !
end min

templates max
  when <?($(1)<$(2)..>)> do $(1) !
  otherwise $(2) !
end max

templates boundingbox
  @: { left: $(1).left, top: $(1).top, bottom: $(1).top + $(1).height, right: $(1).left + $(1).width };
  $(2..last)... -> #
  $@ !

  <>
    @: { left: [$.left, $@.left] -> min,
      top: [$.top, $@.top] -> min,
      bottom: [$.top + $.height, $@.bottom] -> max,
      right: [$.left + $.width, $@.right] -> max };
end boundingbox

processor fabric
  @: { claims: $, bounds: $ -> boundingbox };

  templates quicksort
    @: [];
    $ -> #
    when <[](2..)> do
      def pivot: $(1);
      [ [ $(2..last)... -> \(
        when <?($.y<..$pivot.y>)> do
          $ !
        otherwise
          ..|@quicksort: $;
       \)] -> quicksort..., $pivot, $@ -> quicksort... ] !
     otherwise
       $ !
  end quicksort

  templates verticalScan
    def x: $;
    def profile: [ $@fabric.claims... ->
      \( def w: $x - $.left;
        $ -> #
        <{ left: <..$x>,  width: <$w~..> }> {y: $.top, d: 1"1"} ! {y: $.top + $.height, d: -1"1"} !
      \) ]
      -> quicksort;
    @: { y: $profile(1).y, level: $profile(1).d, count: 0 "1"};
    $profile(2..last)... -> #
    $@.count !

    <>
      def level: $@.level;
      def span: $.y - $@.y;
      def inc: $level -> \(<2..> $span ! <> 0 !\);
      @: { y: $.y, level: $level + $.d, count: $@.count + $inc };
  end verticalScan

  templates sum
    @: 0;
    $... -> \(@sum: $ + $@sum;\) -> !VOID
    $@ !
  end sum

  templates countOverlapInches // should be source
    [ $@fabric.bounds.left..~$@fabric.bounds.right -> verticalScan ] -> sum !
  end countOverlapInches

  templates getNonOverlapping
    templates nonOverlapping
      def candidate: $@fabric.claims($);
      @: $;
      1..$@fabric.claims::length -> #
      $@ -> \(<1..> $ ! \) !

      when <=$@ | ?($@ <=0>)> do
        !VOID

      when <?($@fabric.claims($)
          <{top: <($candidate.top+$candidate.height)..>}
          | {left: <($candidate.left+$candidate.width)..>}
          | ?($.top + $.height <..$candidate.top>)
          | ?($.left+$.width <..$candidate.left>)>
        )> do
        !VOID

      otherwise
        @: 0;
    end nonOverlapping
    [ 1..$@fabric.claims::length -> nonOverlapping ] !
  end getNonOverlapping
end fabric

def cloth: $claims -> fabric;

//part 1
'$cloth::countOverlapInches;
'-> !OUT::write

//part 2
$cloth::getNonOverlapping -> '$(1);
'-> !OUT::write
