composer claim
 { (<'#'>) id:<INT> (<' @ '>)
 left:<INT> (<','>) top:<INT> (<': '>)
 width:<INT> (<'x'>) height: <INT> (<'\n'>?) }
end claim

def claims: [ stdin -> claim ]

templates min
  <?($it(1)<..$it(2)>)> $it(1) !
  <> $it(2) !
end min

templates max
  <?($it(1)<$it(2)..>)> $it(1) !
  <> $it(2) !
end max

templates boundingbox
  { left: $it(1).left, top: $it(1).top, bottom: $it(1).top + $it(1).height, right: $it(1).left + $it(1).width } -> @
  $it(2..-1)... -> #
  $@ !

  <>
    { left: [$it.left, $@.left] -> min,
      top: [$it.top, $@.top] -> min,
      bottom: [$it.top + $it.height, $@.bottom] -> max,
      right: [$it.left + $it.width, $@.right] -> max } -> @
end boundingbox

processor fabric
  { claims: $it, bounds: $it -> boundingbox } -> @

  templates quicksort
    [] -> @
    $it -> #
    <[](2..)>
      def pivot: $it(1)
      [ [ $it(2..-1)... -> (
        <?($it.y<..$pivot.y>)>
          $it !
        <>
          $it -> ...$@quicksort -> @quicksort
       )] -> quicksort..., $pivot, $@ -> quicksort... ] !
     <>
       $it !
  end quicksort

  templates verticalScan
    def x: $it
    def profile: [ $@fabric.claims... ->
      ( def w: $x - $it.left
        $it -> #
        <{ left: <..$x>,  width: <$w~..> }> {y: $it.top, d: 1} ! {y: $it.top + $it.height, d: -1} !
      ) ]
      -> quicksort
    { y: $profile(1).y, level: $profile(1).d, count: 0 } -> @
    $profile(2..-1)... -> #
    $@.count !

    <>
      def level: $@.level
      def span: $it.y - $@.y
      def inc: $level -> (<2..> $span ! <> 0 !)
      { y: $it.y, level: $level + $it.d, count: $@.count + $inc } -> @
  end verticalScan

  templates sum
    0 -> @
    $it... -> ($it + $@sum -> @sum) -> void
    $@ !
  end sum

  templates countOverlapInches // should be source
    [ $@fabric.bounds.left..~$@fabric.bounds.right -> verticalScan ] -> sum !
  end countOverlapInches
end fabric

def cloth: $claims -> fabric

//part 1
$cloth::countOverlapInches -> stdout

