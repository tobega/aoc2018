composer polymerReaction
  [ (<reaction>*) <suffix>* ]
  suffix: <'.'> (<reaction>*)
  reaction: <'(?i)([a-z])(?-i)(?!\1)(?i)\1'>
end polymerReaction

templates reactAll
  @: 0
  $it -> #
  <?($it::length <$@>)>
    $@ !
  <>
  @: $it::length
  '$($it...)' -> polymerReaction -> #
end reactAll

def polymer: [ $IN::lines... ]

// part 1
$polymer -> reactAll -> !OUT::write

'
' -> !OUT::write

// part 2
templates in@{values:}
  def what: $it
  @: 0
  $values... -> #
  $@ !
  <$what>
    @: 1
end in

def allUnits: [ 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'... ]
def pairs: [ 1..$allUnits::length:2 ->  $allUnits($it..$it+1)]

templates findShortest
  templates removeUnit@{unit:}
    [ $polymer... -> (<?($it -> in@{values:$unit} <0>)> $it !) ] !
  end removeUnit
  @: $polymer::length
  $it... -> removeUnit@{unit:$it} -> reactAll -> #
  $@ !
  <..~$@>
    @: $it
end findShortest

$pairs -> findShortest -> !OUT::write