composer polymerReaction
  [ (<reaction>*) <suffix>* ]
  rule suffix: <'.'> (<reaction>*)
  rule reaction: <'(?i)([a-z])(?-i)(?!\1)(?i)\1'>
end polymerReaction

templates reactAll
  @: 0;
  $ -> #
  when <?($::length <=$@>)> do
    $@ !
  otherwise
  @: $::length;
  '$...;' -> polymerReaction -> #
end reactAll

def polymer: [ $IN::lines... ];

// part 1
$polymer -> reactAll -> !OUT::write

'
' -> !OUT::write

// part 2
def allUnits: [ 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'... ];
def pairs: [ 1..$allUnits::length:2 ->  $allUnits($..$+1)];

templates findShortest
  templates removeUnit&{unit:}
    [ $polymer... -> \(<?($unit <~[<=$>]>)> $ !\) ] !
  end removeUnit
  @: $polymer::length;
  $... -> removeUnit&{unit:$} -> reactAll -> #
  $@ !
  when <..~$@> do
    @: $;
end findShortest

$pairs -> findShortest -> !OUT::write