composer coord
  { x: <INT> (<', '>) y: <INT> }
end coord

def coordinates: [ stdin -> coord ] -> [i]($it -> ...{ id: $i } !)

templates min
  <?($it(1)<..$it(2)>)> $it(1) !
  <> $it(2) !
end min

templates max
  <?($it(1)<$it(2)..>)> $it(1) !
  <> $it(2) !
end max

templates boundingbox
  { left: $it(1).x, top: $it(1).y, bottom: $it(1).y, right: $it(1).x } -> @
  $it(2..-1)... -> ({ left: [$it.x, $@boundingbox.left] -> min,
                    top: [$it.y, $@boundingbox.top] -> min,
                    bottom: [$it.y, $@boundingbox.bottom] -> max,
                    right: [$it.x, $@boundingbox.right] -> max } -> @boundingbox) -> void
  $@ !
end boundingbox

def bb: $coordinates -> boundingbox

templates abs
  <0..> $it !
  <> -$it !
end abs

templates quicksort@{comparator:}
  [] -> @
  $it -> #
  <[](2..)>
    def pivot: $it(1)
    [ [ $it(2..-1)... -> (
      <?([$it, $pivot] -> $comparator <..0>)>
        $it !
      <>
        $it -> ...$@quicksort -> @quicksort
     )] -> quicksort@{comparator:$comparator}..., $pivot, $@ -> quicksort@{comparator:$comparator}... ] !
   <>
     $it !
end quicksort

templates byDist
  def second: $it(2).dist
  $it(1).dist -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end byDist

templates sum
  0 -> @
  $it... -> ($@sum + $it -> @sum) -> void
  $@ !
end sum

def field: [$bb.left..$bb.right -> (def x: $it
  [ $bb.top..$bb.bottom -> (def y: $it
       [ $coordinates... -> { id: $it.id, dist: ($it.x - $x -> abs) + ($it.y - $y -> abs) } ]
       -> quicksort@{comparator: byDist}
       -> { closest: $it -> (<?($it(1).dist <$it(2).dist>)> 0 ! <> $it(1).id !),
            sum: [ $it... -> $it.dist ] -> sum } !
     )
  ] !) ]

// part 1
templates natural
  def second: $it(2)
  $it(1) -> #
  <$second> 0 !
  <..$second> -1 !
  <> 1 !
end natural

templates unique
  $it(1) -> @
  [ $it(2..-1)... -> #, $@ ] !
  <~$@>
    $@ !
    $it -> @
end unique

def infinites: [ $field(1;1..-1)..., $field(1..-1;1)..., $field(-1;1..-1)..., $field(1..-1;-1)...]
  -> [ $it... -> $it.closest ] -> quicksort@{comparator: natural} -> unique

templates in@{values:}
  def what: $it
  0 -> @
  $values... -> #
  $@ !
  <$what>
    1 -> @
end in

templates flatten
  <[]>
    $it... -> #
  <>
    $it!
end flatten

templates reduce@{operator:}
  $it(1) -> @
  $it(2..-1)... -> ([$@reduce, $it] -> $operator -> @reduce) -> void
  $@ !
end reduce

templates count@{low:,high:}
  [ $low..$high -> 0 ] -> @
  $it... -> (def i: $it
    [ $@count(1..$i-$low)...,
        $@count($i-$low+1) -> $it + 1,
        $@count($i-$low+2..-1)... ] -> @count) -> void
  $@ !
end count

[ $field -> flatten -> $it.closest -> (<1.. ?($it -> in@{values: $infinites} <0>)> $it !) ]
  -> count@{low: 1, high: $coordinates::length} -> reduce@{operator: max} -> stdout

'
' -> stdout

// part 2
[ $field -> flatten -> $it.sum -> (<..~10000> $it !) ] -> $it::length -> stdout
