grammar coords
  [ <coord>+ ]

  coord: { x: <'\d+'> (<', '>) y: <'\d+'> }
end coords

let coordinates = stdin -> coords -> [i]({ id: $i } -> $it)

stereotype point <{x: <number>, y: <number>}>
stereotype box <{left:<number>, top:<number>, bottom:<number>, right:<number>}>

templates<[<point>]> boundingbox<box>
  { left: $it(1).x, top: $it(1).y, bottom: $it(1).y, right: $it(1).x } -> $boundingbox
  $it(2..) -> $templates
  $boundingbox

  <*>
    { left: ([$it.left, $boundingbox.left] -> min),
      top: ([$it.top, $boundingbox.top] -> min),
      bottom: ([$it.bottom, $boundingbox.bottom] -> max,
      right: ([$it.right, $boundingbox.right] -> max } -> $boundingbox
end boundingbox

let bb = coordinates -> boundingbox

templates<point> distance(point <point>)
  ($it.x - $point.x -> abs) + ($it.y - $point.y -> abs)
end distance

let field = [x:$bb.left..$bb.right, y:$bb.top..$bb.bottom](
  [ $coordinates... -> ({dist: ($it -> distance({x:$x, y:$y}))} -> $it) ] ->
    fold([], (
        <{acc: <[](0)>}>
          [ $it.val ]
        <?($it.acc(1).dist <$it.val.dist>)>
          [ { id: -1, dist: -1} ]
        <?($it.acc(1).dist <$it.val.dist!..>)>
          [ $it.val ]
        <>
          $it.acc
      )
    ) -> $it(1).id
)

let infinites = [ $field(1,*)..., $field(-1,*)..., $field(*,1)..., $field(*,-1)... ] -> unique

let finiteField = $field -> [i,j]($it -> (<?($it -> in($infinites))> -1 <> $it))

// part 1. See a4.tt for summarize and a8.tt for flatten. Need to rework summarize to allow constructed aggregation fields perhaps?
$finiteField -> flatten -> [ $it... -> (<-1> <> {id: $it, count: 1}) ] -> summarize([(id:)], [(count: <Sum>)])
  -> reduce(max(count:)) -> $it.count -> stdout

// part 2.
let totalDist = 10000
let distBox = $bb -> { left: ([$it.left, $it.right - $totalDist] -> min),
                       right: ([$it.right, $it.left + $totalDist] -> max,
                       top: ([$it.top, $it.bottom - $totalDist] -> min,
                       bottom: ([$it.bottom, $it.top + $totalDist] -> max}

let distanceField = [x:$distBox.left..$distBox.right, y:$distBox.top..$distBox.bottom](
  [ $coordinates... ->  distance({x:$x, y:$y}) ] -> reduce(+))

$distanceField -> flatten -> [ $it... -> (<..!$totalDist>) ] -> $it.* -> stdout
