composer coord
  { x: <INT>, (<', '>) y: <INT> }
end coord

def coordinates: [ $IN::lines -> coord ] -> \[i]({ $..., id: $i } !\);

templates min
  <?($(1)<..$(2)>)> $(1) !
  <> $(2) !
end min

templates max
  <?($(1)<$(2)..>)> $(1) !
  <> $(2) !
end max

templates boundingbox
  @: { left: $(1).x, top: $(1).y, bottom: $(1).y, right: $(1).x };
  $(2..-1)... -> @boundingbox: { left: [$.x, $@boundingbox.left] -> min,
                    top: [$.y, $@boundingbox.top] -> min,
                    bottom: [$.y, $@boundingbox.bottom] -> max,
                    right: [$.x, $@boundingbox.right] -> max };
  $@ !
end boundingbox

def bb: $coordinates -> boundingbox;

templates abs
  <0..> $ !
  <> -$ !
end abs

templates quicksort@{comparator:}
  @: [];
  $ -> #
  <[](2..)>
    def pivot: $(1);
    [ [ $(2..-1)... -> \(
      <?([$, $pivot] -> comparator <..0>)>
        $ !
      <>
        ..|@quicksort: $;
     \)] -> quicksort@{comparator:comparator}..., $pivot, $@ -> quicksort@{comparator:comparator}... ] !
   <>
     $ !
end quicksort

templates byDist
  def second: $(2).dist;
  $(1).dist -> #
  <=$second> 0 !
  <..$second> -1 !
  <> 1 !
end byDist

templates sum
  @: 0;
  $... -> @sum: $@sum + $;
  $@ !
end sum

def field: [$bb.left..$bb.right -> \(def x: $;
  [ $bb.top..$bb.bottom -> \(def y: $;
       [ $coordinates... -> { id: $.id, dist: ($.x - $x -> abs) + ($.y - $y -> abs) } ]
       -> quicksort@{comparator: byDist}
       -> { closest: $ -> \(<?($(1).dist <=$(2).dist>)> 0 ! <> $(1).id !\),
            sum: [ $... -> $.dist ] -> sum } !
     \)
  ] !\) ];

// part 1
templates natural
  def second: $(2);
  $(1) -> #
  <=$second> 0 !
  <..$second> -1 !
  <> 1 !
end natural

templates unique
  @: $(1);
  [ $(2..-1)... -> #, $@ ] !
  <~=$@>
    $@ !
    @: $;
end unique

def infinites: [ $field(1;1..-1)..., $field(1..-1;1)..., $field(-1;1..-1)..., $field(1..-1;-1)...]
  -> [ $... -> $.closest ] -> quicksort@{comparator: natural} -> unique;

templates flatten
  <[]>
    $... -> #
  <>
    $!
end flatten

templates reduce@{operator:}
  @: $(1);
  $(2..-1)... -> @reduce: [$@reduce, $] -> operator;
  $@ !
end reduce

templates count@{low:,high:}
  @: [ $low..$high -> 0 ];
  $... -> @count($-$low+1): $@count($-$low+1) + 1;
  $@ !
end count

[ $field -> flatten -> $.closest -> \(<1.. ?($infinites <~[<=$>]>)> $ !\) ]
  -> count@{low: 1, high: $coordinates::length} -> reduce@{operator: max} -> !OUT::write

'
' -> !OUT::write

// part 2
[ $field -> flatten -> $.sum -> \(<..~10000> $ !\) ] -> $::length -> !OUT::write
