def warmup: 635041
def test1: 2018
def test2: 51589

processor Recipes
  { recipes: [3,7], elf: 1, alf: 2 } -> @

  templates concoct // should be source
    def brew: $@Recipes.recipes($@Recipes.elf) + $@Recipes.recipes($@Recipes.alf)
    $brew -> (<..9> $brew -> ...@Recipes.recipes
      <>
      ($brew / 10) -> ...@Recipes.recipes
      ($brew mod 10) -> ...@Recipes.recipes) -> void
    {elf: ($@Recipes.elf + $@Recipes.recipes($@Recipes.elf)) mod $@Recipes.recipes::length + 1,
      alf: ($@Recipes.alf + $@Recipes.recipes($@Recipes.alf)) mod $@Recipes.recipes::length + 1 } -> ...@Recipes
  end concoct

  templates extract10After
    1..$it -> concoct -> void
    $it -> #

    <$@Recipes.recipes::length-10..>
      0 -> concoct -> void
      $it -> #

    <>
      $@Recipes.recipes($it+1..$it+10)... -> ...'' !
  end extract10After

  templates findSequence
    composer parseInt <INT> end parseInt
    def sequence: ['$it;'... -> parseInt ]
    templates matches
      def prefix: $it
      1 -> @
      $sequence -> [i](<~$@Recipes.recipes($prefix+$i)> 0 -> @matches) -> void
      $@ !
    end matches
    0 -> #
    <$@Recipes.recipes::length-$sequence::length..>
      0 -> concoct !
      $it -> #
    <?($it -> matches <1>)> $it !
    <> $it + 1 -> #
  end findSequence
end Recipes

// part 1
def scoreboard: 0 -> Recipes
$test1 -> $scoreboard::extract10After -> stdout

//part 2
$test2 -> $scoreboard::findSequence -> stdout
