composer tag
  <'[a-z]+'>
end tag

def tags: [ stdin -> tag ]

templates twosAndThrees
  [ $it... -> # ] !

  <'.*'>
    def chars: [ $it... ]
    { two: 0, three: 0, c: $chars(1), count: 0, ne: [], rest: $chars(2..-1) } -> #

  <{rest:<[](1..)>}>
    def acc: $it
    $it.rest(1) -> (<$acc.c>
         { count: $acc.count + 1, rest: $acc.rest(2..-1) } -> ...$acc !
      <>
         { ne: [$acc.ne..., $acc.rest(1)], rest: $acc.rest(2..-1) } -> ...$acc !
    ) -> #

  <{rest:<[](0)>, ne:<[](0)>, count:<0>}>
    { two: $it.two, three: $it.three } !

  <{rest:<[](0)>, count: <1>}>
    def acc: $it
    { two: 1, count: 0} -> ...$acc -> #

  <{rest:<[](0)>, count: <2>}>
    def acc: $it
    { three: 1, count: 0} -> ...$acc -> #

  <>
    def acc: $it
    { c: $acc.ne(1), rest: $acc.ne(2..-1), ne: [], count: 0 } -> ...$acc -> #
end twosAndThrees

templates sumTwosAndThrees
  $it(1) -> @
  $it(2..-1)... -> #
  $@ !

  <{}>
    { two: $it.two + $@.two, three: $it.three + $@.three } -> @
end sumTwosAndThrees

// solution to part 1, phew!!!

$tags -> twosAndThrees -> sumTwosAndThrees -> ($it.two * $it.three) -> stdout

'
' -> stdout

// part 2

//templates onediff
//  templates sameletters(other: <string>)
//    $it.chars -> [i](
//          <$other.chars($i)>
//            $it
//        )
//  end sameletters
//  { tag: $it(1), rest: $it(2..) } -> $templates

//  <{ found: <[](1..)>}>
//    $it.found(1)

//  <{rest:<[](1..)>}>
//    $let tagSize = $it.tag.chars.*
//    $let found = [ $it.rest... -> sameletters($it.tag) -> (<?($it.chars.* <($tagSize-1)>)> $it) ]
//    { found: $found, tag: $it.rest(1), rest: $it.rest(2..) } -> $templates
//end onediff

//tags -> onediff -> stdout
    
    
