processor Set
  templates add
    def val: $;
    def ind: $::hashCode -> $ mod $@Set::length + 1;
    $ -> #
    when <?($@Set($ind) <[<=$>]>)> do 0 ! // Already exists
    when <?($@Set($ind) <[](32)>)> do // rehash
      def old: $@Set;
      @Set: [1..$old::length*2 -> []];
      $old... ... -> add -> !VOID
      $ -> add !
    otherwise
      ..|@Set($ind): $;
      1 !
  end add
  @:[1..32 -> []];
  $... -> add -> !VOID
end Set

processor Map&{key:, value:}
  source entries
    $@Map... ... !
  end entries
  templates get
    def needle: $;
    def ind: $::hashCode -> $ mod $@Map::length + 1;
    $@Map($ind)... -> #
    <?($(key) <=$needle>)> $(value) !
  end get
  templates remove
    def needle: $;
    def ind: $::hashCode -> $ mod $@Map::length + 1;
    $@Map($ind) -> \[i](<?($(key) <=$needle>)> ^@Map($ind;$i) !\)... -> $(value) !
  end remove
  templates put
    def val: $;
    def ind: $(key)::hashCode -> $ mod $@Map::length + 1;
    $@Map($ind) -> #
    <[](32)> // rehash
      def old: $@Map;
      @Map: [1..$old::length*2 -> []];
      $old... ... -> put -> !VOID
      $val -> put !
    <>
      $ -> \[i](<?($(key) <=$val(key)>)> ^@Map($ind;$i) !\)... !
      ..|@Map($ind): $val;
  end put
  @:[1..32 -> []];
  $... -> put -> !VOID
end Map
