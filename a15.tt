data type <'E'|'G'>, contains <type|'#'|'.'|'visited'>

def input: [ $IN::lines -> [ $... ] ];

templates flatten
  [ $ -> # ] !
  <[]> $... -> #
  <> $ !
end flatten

templates sum
  @: $(1);
  $(2..last)... -> @: $ + $@;
  $@ !
end sum

templates bestPosition
  when <[] ?($(1).row <$(2).row~..>)> do
    1 !

  when <[] ?($(1).row <..~$(2).row>)> do
    -1 !

  when <[] ?($(1).col <$(2).col~..>)> do
    1 !

  otherwise
    -1 !
end bestPosition

templates first&{comp:}
  @: $(1);
  $(2..last)... -> #
  $@!
  <?([$, $@] -> comp <..~0>)> @: $;
end first

templates lowest&{comp:}
  @: [$(1)];
  $(2..last)... -> #
  $@!
  <?([$, $@(1)] -> comp <=0>)> ..|@: $;
  <?([$, $@(1)] -> comp <..~0>)> @: [$];
end lowest

templates sort&{comp:}
  @: [];
  $ -> #
  when <[](2..)> do
    def pivot: $(1);
    [ [ $(2..last)... -> \(
      when <?([$, $pivot] -> comp <..0>)> do
        $ !
      otherwise
        ..|@sort: $;
     \)] -> sort&{comp:comp}..., $pivot, $@ -> sort&{comp:comp}... ] !
   otherwise
     $ !
end sort

processor Battleground
  @: $ -> \[i;j]({ contains: $, row: ($i)"r", col: ($j)"c" } !\);

  sink remove
    def pos: $;
    @Battleground($pos.row; $pos.col).contains: '.';
  end remove

  templates neighbours
    $@Battleground($.row; [$.col-1, $.col+1])... !
    $@Battleground([$.row-1, $.row+1]; $.col)... !
  end neighbours

  templates inRange&{target:}
    @: 0;
    $ -> neighbours
      -> \(<{contains:<=$target>}> @inRange: 1;\) -> !VOID
    $@ !
  end inRange

  templates bestSquareInRange&{target:}
    @: [];
    $... -> #
    $@ -> \(<[](1..)> $!\) -> first&{comp:bestPosition} !

    <?($ -> inRange&{target:$target} <=1>)>
      ..|@: $;
  end bestSquareInRange

  templates findDirectionToMove&{target:}
      templates moveEntry&{firstMove:}
        when <{contains:<='.'>}> do
          { $..., move: $firstMove } !
      end moveEntry

      templates nextMoves
        def move: $.move;
        $ -> neighbours -> moveEntry&{firstMove:$move} !
      end nextMoves

      templates prioritizedDirection
        when <{a:<='up'>}|{b:<='up'>}> do
          'up'!

        when <{a:<='left'>}|{b:<='left'>}> do
          'left'!

        when <{a:<='right'>}|{b:<='right'>}> do
         'right'!

        when <{a:<='down'>}|{b:<='down'>}> do
          'down'!
      end prioritizedDirection

    def combattant: $;
    @: {visited: $@Battleground,
        atDistance: [
            $@Battleground($combattant.row - 1; $combattant.col) -> moveEntry&{firstMove: 'up'},
            $@Battleground($combattant.row; $combattant.col - 1) -> moveEntry&{firstMove: 'left'},
            $@Battleground($combattant.row; $combattant.col + 1) -> moveEntry&{firstMove: 'right'},
            $@Battleground($combattant.row + 1; $combattant.col) -> moveEntry&{firstMove: 'down'}
        ]
    };
    [$@.atDistance -> bestSquareInRange&{target:$target}] -> #

    when <[](1..)> do
      $(1).move !

    when <?($@.atDistance <[](1..)>)> do
      $@.atDistance... -> ..|@findDirectionToMove.visited($.row;$.col): $ -> {row: $.row, col: $.col, contains: 'visited'};
      def next: [$@.atDistance... -> nextMoves
        -> \(<?($@findDirectionToMove.visited($.row;$.col) <{contains:<='.'>}>)> $ !\)
        // We can get several ways to get to the same square. First we filter out duplicates here,
        // then we filter left-over inferior solutions when we set atDistance
        -> \(
          when <?($@findDirectionToMove.visited($.row;$.col) <{move:<=$.move>}>)> do !VOID
          when <?($@findDirectionToMove.visited($.row;$.col) <{move:<>}>)> do
            @findDirectionToMove.visited($.row;$.col).move:
              {a: $.move, b: $@findDirectionToMove.visited($.row;$.col).move}  -> prioritizedDirection;
            $!
          otherwise
            @findDirectionToMove.visited($.row;$.col).move: $.move;
            $!
        \)
      ];
      @.atDistance: [ $next... -> \onlyBest(<?($.move <=$@findDirectionToMove.visited($.row;$.col).move>)> $ !\onlyBest)];
      [$@.atDistance -> bestSquareInRange&{target:$target}] -> #
  end findDirectionToMove

  templates maybeMove&{target:}
    @: $;
    $ -> inRange&{target:$target} -> \(<=0> $@maybeMove !\) -> findDirectionToMove&{target:$target} -> #

    when <='up'> do
      {dr:-1"r", dc:0"c"} -> #

    when <='left'> do
      {dr:0"r", dc:-1"c"} -> #

    when <='right'> do
      {dr:0"r", dc:1"c"} -> #

    when <='down'> do
      {dr:1"r", dc:0"c"} -> #

    when <{dr:<>,dc:<>}> do
      def move: $;
      ..|@Battleground($@.row; $@.col): {contains:'.'};
      ..|@Battleground($@.row + $move.dr; $@.col + $move.dc): {contains: $@.type};
      $@Battleground($@.row + $move.dr; $@.col + $move.dc) !
  end maybeMove
end Battleground

processor Battle&{setCombatValues:, isFightDecided:}
  @: { battleground: $ -> Battleground,
    lastBeingStruck: 0, // if last being struck, another round was completed
    beings: [ $ -> \[i;j](<='G'|='E'> { type: $, row: ($i)"r", col: ($j)"c" } !\)
      -> flatten -> \[i]({$..., index: $i} !\) ... -> setCombatValues] };

  templates liveBeingAtPosition
    def col:$.col;
    def row: $.row;
    $@Battle.beings... -> \(<{col:<=$col>, row:<=$row>, hitPoints: <1"hp"..>}> $ !\) !
  end liveBeingAtPosition

  sink strike&{damage:}
    @Battle.lastBeingStruck: 1;
    def pos: $;
    def index: $.index;
    @Battle.beings($index).hitPoints: ($@Battle.beings($index).hitPoints - $damage);
    $@Battle.beings($index).hitPoints -> \(<..0"hp"> $pos!\) -> !@Battle.battleground::remove
  end strike

  templates enemyType
    <'G'> 'E' !
    <'E'> 'G' !
  end enemyType

  templates adjacentEnemy&{me:}
    def enemy: $me -> enemyType;
    $ -> @Battle.battleground::neighbours
      -> \(<{contains:<=$enemy>}> $ !\) !
  end adjacentEnemy

  sink takeTurn
    def who: $.index;
    def enemy: $.type -> enemyType;
    $@Battle.beings($who) -> #

    when <{hitPoints:<1"hp"..>}> do
    @Battle.lastBeingStruck: 0;
    templates lowPoints
      when <?($(1).hitPoints <=$(2).hitPoints>)> do 0 !
      when <?($(1).hitPoints <..$(2).hitPoints>)> do -1 !
      otherwise 1 !
    end lowPoints
    $ -> @Battle.battleground::maybeMove&{target:$enemy}
          -> ..|@Battle.beings($who): { row: $.row, col: $.col};
    [ $@Battle.beings($who) -> adjacentEnemy&{me: $@Battle.beings($who).type} -> liveBeingAtPosition
    ] -> \(<[](1..)> $!\) -> lowest&{comp:lowPoints} -> first&{comp: bestPosition} -> !strike&{damage: $@Battle.beings($who).attackValue}
  end takeTurn

  source run
    @: {round: -1"round", isDone: 0};
    $@ -> #

    when <{isDone: <=0>}> do
      @.round: $@.round + 1;
      $@Battle.beings -> sort&{comp: bestPosition}...
        -> \(<{hitPoints: <1"hp"..>}> $ !\)
        -> !takeTurn
      @.isDone: $@Battle.beings -> isFightDecided;
      $@ -> #

    otherwise
      [ $@Battle.beings... -> \(<{hitPoints: <1"hp"..>}> $.hitPoints !\) ] -> sum ->  ($@.isDone::raw * ($@.round + $@Battle.lastBeingStruck::raw) * $)"outcome" !
  end run
end Battle

// part 1

  templates basicCombatValues
    {$..., attackValue: 3"hp", hitPoints: 200"hp"} !
  end basicCombatValues

  templates oneRaceStanding
    @: {elfAlive: 0, goblinAlive: 0};
    $... -> #
    $@ -> \(<{goblinAlive: <=1>, elfAlive: <=1>}> 0! <> 1!\) !

    when <{type: <='G'>, hitPoints: <1"hp"..>}> do
      ..|@: {goblinAlive: 1};

    when <{type: <='E'>, hitPoints: <1"hp"..>}> do
      ..|@: {elfAlive: 1};
  end oneRaceStanding

def battle: $input -> Battle&{setCombatValues:basicCombatValues, isFightDecided:oneRaceStanding};
'$battle::run;
'-> !OUT::write

// part 2
templates victoryOrDeath
    @: {elfDied: 0, goblinAlive: 0};
    $... -> #
    $@ -> \(<{elfDied: <=1>}> -1 ! <{goblinAlive: <=1>}> 0 ! <> 1 !\) !

    <{type: <='G'>, hitPoints: <1"hp"..>}>
      ..|@: {goblinAlive: 1};

    <{type: <='E'>, hitPoints: <..0"hp">}>
      ..|@: {elfDied: 1};
end victoryOrDeath

  templates tweakedCombatValues&{elfAttack:}
    <{type: <='G'>}>
      {$..., attackValue: 3"hp", hitPoints: 200"hp"} !

    <{type: <='E'>}>
      {$..., attackValue: $elfAttack, hitPoints: 200"hp"} !
  end tweakedCombatValues

source part2
  @: { elfAttack: 3"hp", result: -1"outcome" };
  $@ -> #

  <{result: <..~0"outcome">}>
    ..|@: { elfAttack: $@.elfAttack + 1 };
    def battle: $input -> Battle&{setCombatValues:tweakedCombatValues&{elfAttack: $@.elfAttack}, isFightDecided:victoryOrDeath};
    ..|@: { result: $battle::run};
    $@ -> #

  <{result: <0"outcome"..>}>
    $@ -> !OUT::write
end part2

$part2 -> !OUT::write
